
#
# ===============================
# = Basic
# ===============================
spring.application.name=bytedesk
# path
server.servlet.context-path=/
# 本地测试
server.port=8000
#
spring.main.allow-bean-definition-overriding=true

#
# ===============================
# = Logging
# ===============================
logging.level.org.springframework.web=WARNING
logging.level.org.springframework.security=WARNING
logging.level.com.bytedesk=WARNING
#启用Debug模式
debug=true
#文件输出到一个文件中
logging.file=bytedesk.log


# ===============================
# = DATA SOURCE - mysql
# ===============================
# mysql 5.7
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/数据库名?autoReconnect=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=


# ===============================
# = REDIS (RedisProperties)
# = Redis数据库索引（默认为0）
# ===============================
# redis缓存
spring.cache.type=Redis
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=

# ===============================
# 文件上传类型：
# 上传到本地：simple
# 上传到阿里云：aliyun
# ===============================

# 本地存储文件
#upload.type=simple
upload.dir.path=upload
upload.url.prefix=http://192.168.0.100:8000/
#upload.url.prefix=http://localhost:8000/
#upload.url.prefix=http://10.0.2.2:8000/
# 阿里云OSS
#upload.type=aliyun
# 腾讯云cos
upload.type=tencent

#
# ===============================
# = 阿里云OSS访问密钥
# ===============================
aliyun.access.key.id=
aliyun.access.key.secret=

# 阿里云OSS服务相关配置
# OSS的endpoint,这里是华南地区(也就是深圳)
aliyun.oss.endpoint=https://oss-cn-shenzhen.aliyuncs.com
# 需要保留尾部的"/"
aliyun.oss.base.url=https://bytedesk.oss-cn-shenzhen.aliyuncs.com/
# 这是创建的bucket
aliyun.oss.bucket.name=bytedesk
# 这里已经把自己的域名映射到bucket地址了。需要设置域名绑定，设置域名CNAME（暂不使用）
aliyun.oss.img.domain=oss.bytedesk.com

#
# ===============================
# = 腾讯云COS对象存储访问密钥
# ===============================
# 创建bucket并需要在此bucket下创建文件夹：apns/development(二级文件夹), apns/production(二级文件夹), avatars, images, voices, files
# 存储桶所属地域
tencent.bucket.location=ap-shanghai
# 存储桶名称
tencent.bucket.name=bytedesk-1251020864
# 访问域名
tencent.bucket.domain=https://bytedesk-1251020864.cos.ap-shanghai.myqcloud.com

#API密钥管理获取
tencent.appid=
tencent.secretid=
tencent.secretkey=

#
# ===============================
# = Rabbitmq
# ===============================
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=用户名
spring.rabbitmq.password=密码
spring.rabbitmq.stomp.port=61613
spring.rabbitmq.stomp.login=stomp_web
spring.rabbitmq.stomp.passcode=stomp_web

#
# ===============================
# = ZooKeeper
# ===============================
zk.url=47.98.54.86:2181

#
# ===============================
# = spring security
# ===============================
spring.security.user.name=user
spring.security.user.password=password

#
# ===============================
# = JWT - Java Web Token
# ===============================
bytedesk.jwt.signingkey=bytedesk

#
# ===============================
# = Logging
# ===============================
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.xiaper=DEBUG
#logging.file=bytedesk.log
#logging.path=./logs


# ===============================
# = https://docs.spring.io/spring-security-oauth2-boot/docs/current-SNAPSHOT/reference/htmlsingle/
# ===============================
security.oauth2.resource.id=bytedesk
security.oauth2.resource.user-info-uri=http://localhost:8007/user
#security.oauth2.resource.token-info-uri=
security.oauth2.resource.prefer-token-info=false


# ===============================
# = spring-boot-starter-actuator
# ===============================
management.server.address=127.0.0.1
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
management.httptrace.include=REQUEST_HEADERS,RESPONSE_HEADERS,PRINCIPAL,REMOTE_ADDRESS,SESSION_ID

# ===============================
# = spring data : Multiple Spring Data modules found
# ===============================
spring.data.redis.repositories.enabled = false

# ===============================
# = JPA / HIBERNATE
# ===============================
#spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# mysql 5.7
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jackson.serialization.indent_output=true
spring.jpa.open-in-view=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true


# ===============================
# = Spring Session
# ===============================
# 存储方式
spring.session.store-type=Redis
#server.session.timeout=3600*24*30 # Session timeout in seconds. 有效期1个月
#spring.session.redis.flush-mode=IMMEDIATE # Sessions flush mode.
#spring.session.redis.namespace= # Namespace for keys used to store sessions.

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false

# ===============================
# = Spring Batch
# ===============================
spring.batch.initialize-schema=always

# ===============================
# = Swagger2 RESTFull API
# ===============================
swagger2.enable=true

#
# ===============================
# = Mail 通知服务 bytedesk@163.com
# https://blog.csdn.net/LDY1016/article/details/78365072
# ===============================
spring.mail.host=smtp.163.com
# 25端口被阿里云封，故使用465端口
#spring.mail.port=25
spring.mail.username=邮箱
# 密码
#spring.mail.password=bytedesk.com
# 授权码，网易邮箱需要用授权码登录
spring.mail.password=授权码
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.default-encoding=UTF-8
#SSL证书Socket工厂
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
#使用SMTPS协议465端口
spring.mail.properties.mail.smtp.socketFactory.port=465
#显示在收件人邮箱里面的发件人名称
spring.mail.self.username=邮箱

#
# ===============================
# = 
# ===============================
wechat.open.componentAppId=wxf5be602be1104de9
wechat.open.componentSecret=
wechat.open.componentToken=7e80e67360bd50c47d2d639736f8034c
wechat.open.componentAesKey=

wechat.web.appid=wx8e83366e89c8509a
wechat.web.appsecret=

wechat.app.appid=wx397e52c3b24b613d
wechat.app.appsecret=

wechat.mini.appid=wxaa30599823640966
wechat.mini.appsecret=

# 目前存储在：47.99.38.99/47.98.54.86
wechat.pay.certpath=
wechat.pay.appid=
wechat.pay.mch_id=1497255182
wechat.pay.key=
# 通知接收地址
wechat.pay.notify_url=https://pay.bytedesk.com/wechat/pay/notification

#
# ===============================
# = Quartz
# = 1. 到 https://github.com/quartz-scheduler/quartz/releases 下载最新版
# = 2. 到 quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/ 找到.sql文件
# = 3. 导入数据库
# https://medium.com/@ChamithKodikara/spring-boot-2-quartz-2-scheduler-integration-a8eaaf850805
# ===============================
spring.quartz.job-store-type=jdbc
# 3种模式: ALWAYS、EMBEDDED、NEVER
spring.quartz.jdbc.initialize-schema=always
spring.quartz.properties.org.quartz.jobStore.isClustered=true
#spring.quartz.properties.org.quartz.threadPool.threadCount=5
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
#spring.quartz.properties.org.quartz.jobStore.tablePrefix=MYAPP_
#spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate


# 更多自定义配置
# https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

#
# ===============================
# = Enabling GZip compression in Spring Boot
# ===============================
# Enable response compression
server.compression.enabled=true
# The comma-separated list of mime types that should be compressed
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
# Compress the response only if the response size is at least 1KB
server.compression.min-response-size=1024

# Enable HTTP/2 support, if the current environment supports it
server.http2.enabled=true

#
# ===============================
# = Enabling browser caching of static resources in Spring Boot
# ===============================
# Maximum time the response should be cached (in seconds)
spring.resources.cache.cachecontrol.max-age=1200s
# The cache must re-validate stale resources with the server. Any expired resources must not be used without re-validating.
spring.resources.cache.cachecontrol.must-revalidate=true
# The resources are private and intended for a single user. They must not be stored by a shared cache (e.g CDN).
#spring.resources.cache.cachecontrol.cache-private= # set a boolean value true/false
# The resources are public and any cache may store the response.
spring.resources.cache.cachecontrol.cache-public=true

#
# ===============================
# = Configuring multipart file uploads in Spring Boot
# ===============================
spring.servlet.multipart.enabled=true
# Write files to disk if the file size is more than 2KB.
spring.servlet.multipart.file-size-threshold=2KB
# The intermediate disk location where the uploaded files are written
spring.servlet.multipart.location=/tmp
# Maximum file size that can be uploaded
spring.servlet.multipart.max-file-size=50MB
# Maximum allowed multipart request size
spring.servlet.multipart.max-request-size=75MB

