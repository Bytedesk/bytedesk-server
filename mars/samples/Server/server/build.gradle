buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.3'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'com.google.protobuf'

import org.apache.tools.ant.taskdefs.condition.Os
import groovy.transform.Field

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/main/proto'
        }
    }
}

jettyRun {
    contextPath = '/'
    httpPort = 8080    // Port for test
    stopPort = 9090
    stopKey = 'stopKey'
}

jettyStop {
    stopPort = 9090
    stopKey = 'stopKey'
}


protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }
    generatedFilesBaseDir = "$projectDir/src"
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.glassfish.jersey.core:jersey-client:2.14'
    testCompile 'commons-codec:commons-codec:1.9'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'io.netty:netty-all:4.0.4.Final'
    compile 'org.xerial:sqlite-jdbc:3.7.2'
    compile 'apache-log4j:log4j:1.2.15'
}

task nettyRun(type: JavaExec, dependsOn: ['classes']) {
    main = 'com.tencent.mars.proxy.ProxyServer'
    classpath = sourceSets.main.runtimeClasspath
}

@Field
def WEBSERVER = 1;

@Field
def PROXYSERVER = 2;

def createStartScript(int serverType) {

    def reversePort = serverType == WEBSERVER ? 8081 : 8080;
    def fileName = serverType == WEBSERVER ? "start-web-server" : "start-proxy-server";
    def runtty = serverType == WEBSERVER ? "jettyRun" : "nettyRun";

    def cmdFile;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmdFile = "${buildDir}/tmp/" + fileName + ".bat" as File
    }
    else if (Os.isFamily(Os.FAMILY_MAC)) {
        cmdFile = "${buildDir}/tmp/" + fileName + ".command" as File
    }
    else {
        cmdFile = "${buildDir}/tmp/" + fileName + ".sh" as File
    }

    cmdFile.delete();
    cmdFile.createNewFile();

    cmdFile.append("adb reverse --remove tcp:" + reversePort + "\n")
    cmdFile.append("adb reverse tcp:" + reversePort + " tcp:" + reversePort + "\n")
    cmdFile.append("cd ${rootDir}\n")

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmdFile.append(rootDir.getAbsolutePath().substring(0, rootDir.getAbsolutePath().indexOf(":") + 1) + "\n")
        cmdFile.append("gradlew.bat " + runtty)
    }
    else if(Os.isFamily(Os.FAMILY_MAC)) {
        cmdFile.append("./gradlew " + runtty)
        print "chmod a+x ${cmdFile}".execute().text
        print "open ${cmdFile}".execute().text
    }
    else if(Os.isFamily(Os.FAMILY_UNIX)) {
        cmdFile.append("./gradlew " + runtty)
    }


}

task startWebServer(dependsOn: ['compileJava', 'jettyStop']) {
    doLast {
        createStartScript(WEBSERVER)

    }
}

task startProxyServer(dependsOn: 'startWebServer') {
    doLast {
        createStartScript(PROXYSERVER)

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def cmdFile = "${buildDir}/tmp/start.bat" as File
            cmdFile.delete()
            cmdFile.createNewFile()

            cmdFile.append("cd ${buildDir}/tmp/\n")
            cmdFile.append("start start-proxy-server.bat\n")
            cmdFile.append("start start-web-server.bat\n")
            print "${cmdFile}".execute().text
        }
        else if (Os.isFamily(Os.FAMILY_MAC)) {

        }
        else if (Os.isFamily(Os.FAMILY_UNIX)) {
            def cmdFile = "${buildDir}/tmp/start.sh" as File
            cmdFile.delete()
            cmdFile.createNewFile()

            cmdFile.append("cd ${buildDir}/tmp/\n")

            cmdFile.append("chmod a+x start-proxy-server.sh && nohup ./start-proxy-server.sh > proxyRun.log&\n")
            cmdFile.append("chmod a+x start-web-server.sh && nohup ./start-web-server.sh > webRun.log&\n")
            print "chmod a+x ${cmdFile}".execute().text
            print "${cmdFile}".execute().text
        }
    }
}

task clean(dependsOn: 'jettyStop') << {

}